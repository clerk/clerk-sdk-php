<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend\Models\Components;


/** OAuthAccessToken - Success */
class OAuthAccessToken
{
    /**
     *
     * @var OAuthAccessTokenObject $object
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('object')]
    #[\Speakeasy\Serializer\Annotation\Type('\Clerk\Backend\Models\Components\OAuthAccessTokenObject')]
    public OAuthAccessTokenObject $object;

    /**
     * External account ID
     *
     * @var string $externalAccountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_account_id')]
    public string $externalAccountId;

    /**
     * The unique ID of the user in the external provider's system
     *
     * @var string $providerUserId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('provider_user_id')]
    public string $providerUserId;

    /**
     * The access token
     *
     * @var string $token
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('token')]
    public string $token;

    /**
     * The ID of the provider
     *
     * @var string $provider
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('provider')]
    public string $provider;

    /**
     * $publicMetadata
     *
     * @var array<string, mixed> $publicMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('public_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>')]
    public array $publicMetadata;

    /**
     * Unix timestamp of the access token expiration.
     *
     * @var ?int $expiresAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('expires_at')]
    public ?int $expiresAt;

    /**
     *
     * @var ?string $label
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('label')]
    public ?string $label;

    /**
     * The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens.
     *
     * @var ?array<string> $scopes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scopes')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $scopes = null;

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     *
     * @var ?string $tokenSecret
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('token_secret')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $tokenSecret = null;

    /**
     * @param  OAuthAccessTokenObject  $object
     * @param  string  $externalAccountId
     * @param  string  $providerUserId
     * @param  string  $token
     * @param  string  $provider
     * @param  array<string, mixed>  $publicMetadata
     * @param  ?int  $expiresAt
     * @param  ?string  $label
     * @param  ?array<string>  $scopes
     * @param  ?string  $tokenSecret
     * @phpstan-pure
     */
    public function __construct(OAuthAccessTokenObject $object, string $externalAccountId, string $providerUserId, string $token, string $provider, array $publicMetadata, ?int $expiresAt = null, ?string $label = null, ?array $scopes = null, ?string $tokenSecret = null)
    {
        $this->object = $object;
        $this->externalAccountId = $externalAccountId;
        $this->providerUserId = $providerUserId;
        $this->token = $token;
        $this->provider = $provider;
        $this->publicMetadata = $publicMetadata;
        $this->expiresAt = $expiresAt;
        $this->label = $label;
        $this->scopes = $scopes;
        $this->tokenSecret = $tokenSecret;
    }
}